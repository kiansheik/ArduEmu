package emulator;

public enum CommandEnum {
    ADD (0x0c00, new comADD()),
    ADC (0x1c00, new comADC()),
    ADIW(0x9600, new comADIW()),
    SUB (0x1800, new comSUB()),
    SUBI(0x5000, new comSUBI()),
    SBC (0x0800, new comSBC()),
    SBCI(0x4000, new comSBCI()),
    SBIW(0x9700, new comSBIW()),
    AND (0x2000, new comAND()),
    ANDI(0x7000, new comANDI()),
    OR  (0x2800, new comOR()),
    ORI (0x6000, new comORI()),
    EOR (0x2400, new comEOR()),
    COM(0x9400, new comiCON()),
    NEG(0x9401, new comNEG()),
    SBR(0xfc00, new comSBR()),
    INC(0x9403, new comINC()),
    DEC(0x940a, new comDEC()),
    MUL(0x9c00, new comMUL()),
    MULS(0x0200, new comMULS());
    
	private final long opcode;
	private final AbstractCommand com;

	public long getOpcode() {return opcode;}
	public AbstractCommand getCom() {return com;}
	
	CommandEnum(long opcode, AbstractCommand link) {
		this.opcode = opcode; this.com = link;
	}
	
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {
		com.run(mem, prom, ptr, opcode);
	}
}

class comADD extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {
		
	}
}

class comADC extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {}
}

class comADIW extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {}
}

class comSUB extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {}
}

class comSUBI extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {}
}

class comSBC extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {}
}

class comSBCI extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {}
}

class comSBIW extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {}
}

class comAND extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {}
}

class comANDI extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {}
}

class comOR extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {}
}

class comORI extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {}
}

class comEOR extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {}
}

class comiCON extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {}
}

class comNEG extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {}
}

class comSBR extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {}
}

/*class comCBR extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {}
}*/

class comINC extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {}
}

class comDEC extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {}
}

class comMUL extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {}
}

class comMULS extends AbstractCommand {
	@Override
	public void run(byte[] mem, byte[] prom, byte ptr, long opcode) {}
}